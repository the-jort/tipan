package com.jort.apexqr;


import android.Manifest;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.database.Cursor;
import android.os.Bundle;
import android.util.SparseArray;
import android.view.SurfaceHolder;
import android.view.SurfaceView;
import android.view.View;
import android.widget.Button;
import android.widget.TextView;
import android.widget.Toast;

import com.google.android.gms.vision.CameraSource;
import com.google.android.gms.vision.Detector;
import com.google.android.gms.vision.barcode.Barcode;
import com.google.android.gms.vision.barcode.BarcodeDetector;

import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Locale;

import androidx.annotation.NonNull;
import androidx.appcompat.app.AppCompatActivity;
import androidx.core.app.ActivityCompat;
import androidx.core.content.ContextCompat;

public class Scan extends AppCompatActivity {

    public static final int CAMERA_PERMISSION_CODE = 100;

    private SurfaceView surfaceView;
    private TextView tv_empId;
    private TextView tv_fullName;
    private TextView tv_status;
    private CameraSource cameraSource;
    private BarcodeDetector barcodeDetector;
    private Button btn_cameraPermission;
    private Button btn_resetScan;
    private Button btn_accept;
    private Button btn_deny;
    private Button btn_close;
    private DataHelper dataHelper;
    private LogHelper logHelper;
    private SetupHelper setupHelper;

    private String deviceId;
    private String currentDate, currentTime;

    @Override
    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults);
        if (requestCode == CAMERA_PERMISSION_CODE) {
            if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                Toast.makeText(this, "Permission Granted", Toast.LENGTH_SHORT).show();
            } else {
                Toast.makeText(this, "Permission Denied", Toast.LENGTH_SHORT).show();
            }
        }
    }

    public void checkPermission(String permission, int requestCode) {
        if (ContextCompat.checkSelfPermission(this, permission) == PackageManager.PERMISSION_DENIED) {
            ActivityCompat.requestPermissions(this, new String[]{permission}, requestCode);
        } else {

            Toast.makeText(this, "Permission Already Granted", Toast.LENGTH_SHORT).show();
        }
    }

    private void saveLog(String logStatus) {
        //Get the current date
        currentDate = new SimpleDateFormat("MM/dd/yyyy", Locale.getDefault()).format(new Date());
        currentTime = new SimpleDateFormat("hh:mm:ss", Locale.getDefault()).format(new Date());

        LogModel logModel = new LogModel(tv_empId.getText().toString(), tv_fullName.getText().toString(), tv_status.getText().toString(),
                logStatus, currentDate, currentTime, deviceId);
        boolean addResult = logHelper.createLog(logModel);
        //Toast.makeText(Scan.this, "Save: " + String.valueOf(addResult) + "; Date: " + currentDate + "; Time: " + currentTime, Toast.LENGTH_LONG).show();

        Intent intent = new Intent(getBaseContext(), Scan.class);
        startActivity(intent);
    }

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_scan);

        dataHelper = new DataHelper(this);
        logHelper = new LogHelper(this);
        setupHelper = new SetupHelper(this);

        surfaceView = findViewById(R.id.sv_qrCode);
        tv_empId = findViewById(R.id.tv_empId);
        tv_fullName = findViewById(R.id.tv_fullName);
        tv_status = findViewById(R.id.tv_status);

        barcodeDetector = new BarcodeDetector.Builder(getApplicationContext())
                .setBarcodeFormats(Barcode.QR_CODE).build();
        cameraSource = new CameraSource.Builder(getApplicationContext(), barcodeDetector)
                .setRequestedPreviewSize(640, 480).build();

        btn_cameraPermission = findViewById(R.id.btn_cameraPermission);
        btn_resetScan = findViewById(R.id.btn_resetScan);
        btn_accept = findViewById(R.id.btn_accept);
        btn_deny = findViewById(R.id.btn_deny);
        btn_close = findViewById(R.id.btn_close);

        btn_accept.setEnabled(false);
        btn_deny.setEnabled(false);
        tv_status.setTextColor(getResources().getColor(R.color.blue));

        Cursor setupCursor = setupHelper.selectSetup();
        setupCursor.moveToFirst();
        deviceId = setupCursor.getString(0).toString(); //Device ID

        surfaceView.getHolder().addCallback(new SurfaceHolder.Callback() {
            @Override
            public void surfaceCreated(SurfaceHolder surfaceHolder) {
                if (ActivityCompat.checkSelfPermission(getApplicationContext(), Manifest.permission.CAMERA)
                        != PackageManager.PERMISSION_GRANTED) {
                    return;
                }
                try {
                    cameraSource.start(surfaceHolder);
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }

            @Override
            public void surfaceChanged(SurfaceHolder surfaceHolder, int i, int i1, int i2) {

            }

            @Override
            public void surfaceDestroyed(SurfaceHolder surfaceHolder) {

            }
        });

        barcodeDetector.setProcessor(new Detector.Processor<Barcode>() {
            @Override
            public void release() {

            }

            @Override
            public void receiveDetections(Detector.Detections<Barcode> detections) {
                final SparseArray<Barcode> qrCode = detections.getDetectedItems();
                if (qrCode.size() != 0) {
                    tv_empId.post(new Runnable() {
                        @Override
                        public void run() {
                            tv_empId.setText(qrCode.valueAt(0).displayValue);
                            cameraSource.stop();
                            checkLocalData(tv_empId.getText().toString());
                        }
                    });
                }
            }
        });

        btn_cameraPermission.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                checkPermission(Manifest.permission.CAMERA, CAMERA_PERMISSION_CODE);
                //checkLocalData("10735");
            }
        });

        btn_resetScan.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
//                tv_empId.setText("NONE");
//                tv_fullName.setText("NONE DETECTED");
//                tv_status.setText("N/A");
                Intent intent = new Intent(getBaseContext(), Scan.class);
                startActivity(intent);
                finish();
            }
        });

        btn_close.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                //checkLocalData("10735");
                finish();
                Scan.super.onBackPressed();
                finish();
            }
        });

        //ACCEPTED
        btn_accept.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                saveLog("ACCEPTED");
                btn_resetScan.performClick();
            }
        });

        //DENIED
        btn_deny.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                saveLog("DENIED");
                btn_resetScan.performClick();
            }
        });
    }

    private void checkLocalData (String empId) {
        Cursor cursorData = dataHelper.selectDataArgs(empId);
        cursorData.moveToFirst();
        if (cursorData.getCount() > 0) {//Employee found get name and status
            tv_fullName.setText(cursorData.getString(1).trim().toString());
            tv_status.setText(cursorData.getString(2).toString());
            if (tv_status.getText().equals("ALLOWED")) {
                tv_status.setTextColor(getResources().getColor(R.color.blue));
                btn_accept.setEnabled(true);
                btn_deny.setEnabled(true);
            }
            else {//NOT ALLOWED
                tv_status.setTextColor(getResources().getColor(R.color.red));
            }
        }
        else { //Employee not found
            tv_fullName.setText("NOT FOUND");
            tv_status.setText("N/A");
        }
    }
}